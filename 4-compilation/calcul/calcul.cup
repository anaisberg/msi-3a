// $Id: calcul.cup 505 2017-09-25 12:44:47Z coelho $

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

// definition des token
terminal TK_PLUS, TK_MOINS, TK_DONE;
terminal TK_FOIS, TK_DIVISE;
terminal TK_SIN, TK_COS;
terminal TK_UNAIRE, TK_LEFTPAR, TK_RIGHTPAR;
terminal Double TK_VAL; 

// definition des etats intermediaires
non terminal commandes, commande;
non terminal Double expression;

// associativite et priorite des operateurs
precedence left TK_PLUS, TK_MOINS;
precedence left TK_FOIS, TK_DIVISE;
precedence left TK_UNAIRE;
precedence right TK_SIN, TK_COS;

// objectif
start with commandes;

commandes ::=
    commande
  | commandes commande
;

commande ::=
    expression:e // expression seule, affichage
	{: System.out.println("# " + e); :}
    TK_DONE
;

expression ::=
    expression:e1 TK_PLUS expression:e2 // effectue l'addition
	{: RESULT = e1 + e2 ; :}
  | expression:e1 TK_MOINS expression:e2 // effectue la soustraction
	{: RESULT = e1 - e2 ; :}
  | expression:e1 TK_FOIS expression:e2 // effectue la multiplication
	{: RESULT = e1 * e2 ; :}
  | expression:e1 TK_DIVISE expression:e2 // effectue la division
	{: RESULT = e1 / e2 ; :}
  | TK_MOINS expression:e1 // effectue l'inversion
	{: RESULT = - e1 ; :} // %prec TK_UNAIRE
  | TK_LEFTPAR expression:e TK_RIGHTPAR // met une expression entre parenth√®ses
	{: RESULT = (e) ; :}
  | TK_SIN TK_LEFTPAR expression:e TK_RIGHTPAR // calcule le sinus
  {: RESULT = Math.sin(e) ; :}
  | TK_COS TK_LEFTPAR expression:e TK_RIGHTPAR // calcule le cosinus
  {: RESULT = Math.cos(e) ; :}
  | TK_VAL:v // valeur
	{: RESULT = v; :}
;
